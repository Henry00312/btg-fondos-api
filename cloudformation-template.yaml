AWSTemplateFormatVersion: '2010-09-09'
Description: 'BTG Pactual - Sistema de Fondos de Inversion - Infraestructura Completa AWS'

Parameters:
  GitHubRepository:
    Type: String
    Default: 'https://github.com/Henry00312/btg-fondos-api'
    Description: 'URL del repositorio GitHub'
    
  MongoDBConnectionString:
    Type: String
    NoEcho: true
    Description: 'MongoDB Atlas connection string'
    Default: 'mongodb+srv://USERNAME:PASSWORD@cluster0.mongodb.net/fondosDB?retryWrites=true&w=majority'
    
  JWTSecret:
    Type: String
    NoEcho: true
    Description: 'JWT Secret Key para autenticacion'
    Default: 'CHANGE_THIS_JWT_SECRET_KEY'
    
  AdminSecretKey:
    Type: String
    NoEcho: true  
    Description: 'Clave secreta para crear administradores'
    Default: 'CHANGE_THIS_ADMIN_SECRET'

Resources:
  # ========== VPC Y NETWORKING ==========
  
  BTGVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'
        - Key: Project
          Value: BTG-Fondos

  BTGPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BTGVpc
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet-1'

  BTGInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  BTGAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BTGVpc
      InternetGatewayId: !Ref BTGInternetGateway

  BTGRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BTGVpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rt'

  BTGRoute:
    Type: AWS::EC2::Route
    DependsOn: BTGAttachGateway
    Properties:
      RouteTableId: !Ref BTGRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref BTGInternetGateway

  BTGSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BTGPublicSubnet1
      RouteTableId: !Ref BTGRouteTable

  # ========== SECURITY GROUPS ==========
  
  BTGAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group para BTG Fondos Application
      VpcId: !Ref BTGVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-sg'

  # ========== IAM ROLES Y POLICIES ==========
  
  BTGAppRunnerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-AppRunnerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: build.apprunner.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BTGSecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref BTGApplicationSecrets

  BTGAppRunnerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-AppRunnerInstanceRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BTGRuntimePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref BTGApplicationSecrets
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref BTGNotificationTopic

  BTGLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BTGNotificationPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  # ========== SECRETS MANAGER ==========
  
  BTGApplicationSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-application-secrets'
      Description: 'Credenciales y configuracion para BTG Fondos API'
      SecretString: !Sub |
        {
          "MONGO_URI": "${MongoDBConnectionString}",
          "JWT_SECRET": "${JWTSecret}",
          "ADMIN_SECRET_KEY": "${AdminSecretKey}",
          "NODE_ENV": "production",
          "PORT": "3001",
          "GITHUB_REPO": "${GitHubRepository}"
        }
      Tags:
        - Key: Project
          Value: BTG-Fondos
        - Key: Environment
          Value: Production

  # ========== CLOUDWATCH ==========
  
  BTGApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apprunner/${AWS::StackName}'
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: BTG-Fondos

  BTGSystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}'
      RetentionInDays: 14

  # ========== SNS PARA NOTIFICACIONES ==========
  
  BTGNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-notifications'
      DisplayName: 'BTG Fondos - Notificaciones de Suscripciones'
      Tags:
        - Key: Project
          Value: BTG-Fondos

  # ========== LAMBDA PARA NOTIFICACIONES ==========
  
  BTGNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-notification-handler'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt BTGLambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref BTGNotificationTopic
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const sns = new AWS.SNS();
          
          exports.handler = async (event) => {
              console.log('Notification event:', JSON.stringify(event, null, 2));
              
              try {
                  const message = {
                      TopicArn: process.env.SNS_TOPIC_ARN,
                      Message: JSON.stringify({
                          notification_type: event.notification_type || 'subscription',
                          client_name: event.client_name,
                          fund_name: event.fund_name,
                          amount: event.amount,
                          timestamp: new Date().toISOString()
                      }),
                      Subject: 'BTG Fondos - Notification'
                  };
                  
                  await sns.publish(message).promise();
                  console.log('Notification sent successfully');
                  
                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: 'Notification sent' })
                  };
              } catch (error) {
                  console.error('Error sending notification:', error);
                  throw error;
              }
          };
      Tags:
        - Key: Project
          Value: BTG-Fondos

  # ========== CLOUDWATCH ALARMS ==========
  
  BTGHighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-high-error-rate'
      AlarmDescription: 'Alarma para alta tasa de errores en la aplicacion'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 5
      Dimensions:
        - Name: FunctionName
          Value: !Ref BTGNotificationFunction
      AlarmActions:
        - !Ref BTGNotificationTopic

  # ========== S3 BUCKET PARA ARCHIVOS ESTATICOS ==========
  
  BTGStaticFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-static-files-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Project
          Value: BTG-Fondos

  # ========== KMS KEY PARA ENCRIPTACION ==========
  
  BTGEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS Key para encriptacion de datos BTG Fondos'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: !GetAtt BTGAppRunnerInstanceRole.Arn
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
      Tags:
        - Key: Project
          Value: BTG-Fondos

  BTGEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-encryption-key'
      TargetKeyId: !Ref BTGEncryptionKey

# ========== OUTPUTS ==========

Outputs:
  # Informacion de la Infraestructura
  VpcId:
    Description: 'ID de la VPC creada'
    Value: !Ref BTGVpc
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  PublicSubnet1Id:
    Description: 'ID de la Subnet Publica 1'
    Value: !Ref BTGPublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1-ID'

  SecurityGroupId:
    Description: 'ID del Security Group de la aplicacion'
    Value: !Ref BTGAppSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup-ID'

  # Roles IAM
  AppRunnerServiceRoleArn:
    Description: 'ARN del Role para App Runner Service'
    Value: !GetAtt BTGAppRunnerServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AppRunnerServiceRole-ARN'

  AppRunnerInstanceRoleArn:
    Description: 'ARN del Role para App Runner Instance'
    Value: !GetAtt BTGAppRunnerInstanceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AppRunnerInstanceRole-ARN'

  # Secrets Manager
  ApplicationSecretsArn:
    Description: 'ARN de Secrets Manager con las credenciales'
    Value: !Ref BTGApplicationSecrets
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationSecrets-ARN'

  # CloudWatch
  ApplicationLogGroupName:
    Description: 'Nombre del Log Group de la aplicacion'
    Value: !Ref BTGApplicationLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationLogGroup-Name'

  # SNS y Notificaciones
  NotificationTopicArn:
    Description: 'ARN del Topic SNS para notificaciones'
    Value: !Ref BTGNotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-NotificationTopic-ARN'

  NotificationFunctionArn:
    Description: 'ARN de la funcion Lambda para notificaciones'
    Value: !GetAtt BTGNotificationFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-NotificationFunction-ARN'

  # Storage y Encriptacion
  StaticFilesBucketName:
    Description: 'Nombre del bucket S3 para archivos estaticos'
    Value: !Ref BTGStaticFilesBucket
    Export:
      Name: !Sub '${AWS::StackName}-StaticFilesBucket-Name'

  EncryptionKeyId:
    Description: 'ID de la KMS Key para encriptacion'
    Value: !Ref BTGEncryptionKey
    Export:
      Name: !Sub '${AWS::StackName}-EncryptionKey-ID'

  # Resumen de Cumplimiento
  InfrastructureCompliance:
    Description: 'Cumplimiento de requisitos de infraestructura'
    Value: 'COMPLETO - Toda la infraestructura desplegada en AWS via CloudFormation'

  DeploymentCompliance:
    Description: 'Cumplimiento de requisitos de despliegue'
    Value: 'COMPLETO - Backend desplegable mediante AWS CloudFormation con documentacion'

  # Informacion del Proyecto
  ProjectSummary:
    Description: 'Resumen del proyecto BTG Fondos'
    Value: 'Sistema completo de gestion de fondos de inversion desplegado en AWS'

  TechnicalStack:
    Description: 'Stack tecnologico utilizado'
    Value: 'Node.js + MongoDB Atlas + AWS App Runner + CloudFormation + SNS + Lambda + KMS'